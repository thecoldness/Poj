#include<cstdio>
#include<cctype>
#include<algorithm>
using namespace std;
inline int read()
{
	int res = 0;
	char c;
	bool flag = false;
	c = getchar();
	while(!isdigit(c))
	{
		flag = (c == '-');
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return !flag ? res : -res;
}
const int Max_n = 2e5 + 5;
int squ[Max_n * 2] , dfn[Max_n] , tim , n , m , logm[Max_n * 2] , head[Max_n] , tot , dep[Max_n] , val[Max_n];
int ret;
struct node{
	int nex , to;
	node(int a , int b)
	{
		nex = a , to = b;
	}
	node(){}
}edge[Max_n * 2];
inline void add_edge(int x , int y)
{
	edge[ ++ tot] = node(head[x] , y) , head[x] = tot;
	edge[ ++ tot] = node(head[y] , x) , head[y] = tot;
}
void dfs(int now , int from)
{
	squ[ ++ tim] = now;
	dfn[now] = tim;
	dep[now] = dep[from] + 1;
	for(int i = head[now] ; i ; i = edge[i].nex)
	{
		int nex = edge[i].to;
		if(nex == from)	continue;
		dfs(nex , now);
		squ[ ++ tim] = now;
	}
}
struct Node{
	int dot , dep;
	Node(int a , int b)
	{
		dot = a , dep = b;
	}
	Node(){}
	bool operator < (const Node &a)const
	{
		return dep < a.dep;
	}
}f[Max_n * 2][20];
inline void build()
{
	for(int i = 1 ; i <= tim ; ++ i)
		f[i][0] = Node(squ[i] , dep[squ[i]]);
	for(int j = 1 ; j <= logm[tim] ; ++ j)
		for(int i = 1 ; i <= tim ; ++ i)
			if(i + (1 << j) <= tim)	f[i][j] = min(f[i][j - 1] , f[i + (1 << (j - 1))][j - 1]);
}
inline int lca(int x , int y)
{
	int l = dfn[x] , r = dfn[y];
	if(l > r)	swap(l , r);
	int len = r - l + 1;
	return min(f[l][logm[len]] , f[r - (1 << logm[len]) + 1][logm[len]]).dot;
}
void dfs_ans(int now , int from)
{
	for(int i = head[now] ; i ; i = edge[i].nex)
	{
		int nex = edge[i].to;
		if(nex == from)	continue;
		dfs_ans(nex , now);
		val[now] += val[nex];
	}
	if(!val[now])	ret += m;
	if(val[now] == 1)	++ ret;
}
int main()
{
	n = read() , m = read();
	for(int i = 1 ; i < n ; ++ i)
	{
		int ui = read() , vi = read();
		add_edge(ui , vi);
	}
	dfs(1 , 0);
	for(int i = 2 ; i <= tim ; ++ i)
		logm[i] = logm[i / 2] + 1;
	build();
	for(int i = 1 ; i <= m ; ++ i)
	{
		int ui = read() , vi = read();
		int l = lca(ui , vi);
		++ val[ui] , ++ val[vi];
		val[l] -= 2;
	}
	ret -= m;
	dfs_ans(1 , 0);
	printf("%d" , ret);
	return 0;
}
