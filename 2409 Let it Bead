#include <cstdio>
#include <cstring>
#include <cctype>
#include <algorithm>
using namespace std;

namespace thecold
{
	typedef long long ll;

	inline int read()
	{
		int res = 0; bool flag = false;
		char c = getchar();
		while(!isdigit(c))
			flag = (c == '-') , c = getchar();
		while(isdigit(c))
			res = res * 10 + (c ^ 48) , c = getchar();
		return !flag ? res : -res;
	}

	int n , t;

	inline ll quickpow(ll x , ll y)
	{
		ll ret = 1;
		while(y)
		{
			if(y & 1) ret = ret * x;
			x = x * x , y >>= 1;
		}
		return ret;
	}

	inline int phi(int x)
	{
		int ret = x;
		for(int i = 2 ; i * i <= x ; ++ i)
		{
			if(x % i) continue;
			ret /= i , ret *= (i - 1);
			while(x % i == 0) x /= i;
		}
		if(x != 1) ret /= x , ret *= (x - 1);
		return ret;
	}

	inline void main()
	{
		t = read() , n = read();
		while(t || n)
		{
			if(n == 1) printf("%d\n" , t);
			else if(n == 2) printf("%d\n" , t * t - t * (t - 1) / 2);
			else
			{
				ll ret = 0;
				for(int i = 1 ; i * i <= n ; ++ i)
					if(n % i == 0)
					{
						ret += quickpow(t , i) * phi(n / i);
						if(i * i != n) ret += quickpow(t , n / i) * phi(i);
					}
				if(n % 2)	ret += n * quickpow(t , (n + 1) / 2);
				else ret += n / 2 * (quickpow(t , n / 2 + 1) + quickpow(t , n / 2));
				ret /= 2 * n; printf("%lld\n" , ret);
			}
			t = read() , n = read();
		}
	}
}

int main()
{
	thecold::main();
	return 0;
}
